CREATE TEMP FUNCTION startTime() AS (TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL 7 DAY));
CREATE TEMP FUNCTION postStartTime() AS (TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL 7 DAY));
CREATE TEMP FUNCTION scTVStartTime() AS (TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL 120 DAY)); 
CREATE TEMP FUNCTION currHour() AS (CAST(FLOOR(MOD(UNIX_SECONDS(CURRENT_TIMESTAMP) + 330*60, 86400) / 3600) AS INT64));

with
  window_pre_agg1 as 
  (
    SELECT *
      , floor((sum(vplays) over(partition by postId order by time desc)) / 1000) as vr
    FROM (
      SELECT
        postId
        , time
        , sum(vid_plays) vplays
        , sum(shares) shares
        , sum(likes) likes
        , sum(favs) favs
        , sum(views) views
      FROM `maximal-furnace-783.ds_analytics.post_15_min_features_v2`
      WHERE date(TIME) > date(startTime())
      group by postId,time)
  )
 , long_form_video as(
    select 
      postId, 
      any_value(REGEXP_REPLACE(concat(category,"_",post_category),' ','')) combined_cat,
      any_value(REGEXP_REPLACE(category,' ','')) cat, 
      any_value(REGEXP_REPLACE(source,' ','')) source,
      any_value(ifnull(IF(LENGTH(REPLACE(REPLACE(REPLACE(LOWER(L0_category), "&", " and "), "humor", "humour"), "  ", " ")) < 1, "NA", REPLACE(REPLACE(REPLACE(LOWER(L0_category), "&", " and "), "humor", "humour"), "  ", " ")), "NA")) L0_category,
      any_value(ifnull(IF(LENGTH(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(L1_category), "&", " and "), "/", " / "), "performane", "performance"), "performance ", "performance"), "  ", " "), "albums ", "albums"), "shows", "show")) < 1, "NA", REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(L1_category), "&", " and "), "/", " / "), "performane", "performance"), "performance ", "performance"), "  ", " "), "albums ", "albums"), "shows", "show")), "NA")) L1_category,
    from `maximal-furnace-783.sc_analytics.sharechat_tv_source_metadata`
    where time > scTVStartTime() 
    and duration >= 180
    group by 1
  )
  , post_status_changed AS (
    SELECT DISTINCT id AS postId
    FROM (
      SELECT *, RANK() OVER(PARTITION BY id ORDER BY TIME DESC) AS r
      FROM `maximal-furnace-783.sc_analytics.post_status_change`ps
      left join long_form_video 
      on long_form_video.postId=ps.id
      WHERE TIME > scTVStartTime()
      QUALIFY r = 1)
    WHERE split(langAdultStatus,'_')[offset(1)] = "0"
      AND split(langAdultStatus,'_')[offset(2)] = "2"
      AND split(langStatus,'_')[offset(1)] = "2"
  )

  , ugc AS (
    select *
    , ipl_post1 is not null as ipl_post
    from (
      SELECT
        time as ugcTime
        , replace(ugc.postId, 'S', '') postId
        , case when cast(ugc.bucketId as int) in (1778,1769,1784,1771,1777,1774,1794,1751,1799,1494) then 'ipl' else null end as ipl_post1
        , language
        , source
        , composetype postType
        , duration
        , cast(distinct_id as string) userId
        , row_number() over(partition by ugc.postId order by time desc) as r
        , long_form_video.postId is not null as lf_video
        , combined_cat
        , cat
        , L0_category
        , L1_category
        , distinct_id AS creator_id
        , array (
          select substr(split(regexp_replace(tag, '("|{|})', ''), ':')[offset(0)], 1)
          from unnest(tags) as tag
        ) as tags
      FROM `maximal-furnace-783.sc_analytics.ugc_post_created` ugc
      left join long_form_video on replace(ugc.postid,'S','')=long_form_video.postId
      where (time > scTVStartTime()
            and (time > postStartTime()  or  long_form_video.postId is not null)))
    where r = 1
  )
  , ignoreTimeTags AS (
    SELECT tagId, any_value(allowedHours) as allowedHours
    FROM `maximal-furnace-783.ds_analytics.ignore_time_tags`
    group by tagId
  )

  , post AS (
    -- Ensure that there is only one row for each post-id
    SELECT
      postId
      , ugcTime
      , language as lang
      , source
      , creator_id
      , duration
      , postType
      , lf_video
      , ipl_post
      , cat
      , L0_category
      , L1_category
      , combined_cat
      , tags
      , (select logical_and(currHour() in unnest(allowedHours)) from unnest(tags) tagId inner join ignoreTimeTags using (tagId)) as isTimeTag
    FROM ugc
    inner join post_status_changed using (postId)
    WHERE language IS NOT null AND postId IS NOT null
  )
  , counter_agg AS (
    SELECT
      postId
      , sum(w1.views) as views
      , (sum(w1.likes) + sum(w1.shares) + sum(w1.favs)) / sum(w1.views) as score_v3
      , (sum(pow(0.999, w1.vr) * (w1.favs + w1.likes + w1.shares)) / sum(pow(0.999, w1.vr) * w1.views)) as score_v4
    FROM window_pre_agg1 w1
    GROUP BY postId
    having views > 50
  )
  , plays AS (
    SELECT
      *
      , if (views > 500 and ifnull(isTimeTag, true), lang, null) as lang_grp
      , if (views > 50 and lf_video ,concat('lf_video_', lang,'_',cat), null) as lf_video_grp1
      , if (views > 50 and lf_video ,concat('lf_video_', lang,'_',combined_cat), null) as lf_video_grp2
      , if (views > 50 and lf_video ,concat('lf_video_', lang,'_',source), null) as lf_video_grp3
      , if (views > 50 and lf_video ,concat('lf_video_', lang,'_',L0_category), null) as lf_video_grp4
      , if (views > 50 and lf_video ,concat('lf_video_', lang,'_',L1_category), null) as lf_video_grp5
      , if (views > 100 and ipl_post ,concat('ipl_post_', lang), null) as ipl_post_grp --check for ifnull(isTimeTag, true)
    FROM counter_agg
    inner join post using (postId)
  )
  , data as (
    select
      postId
      , lang
      , duration
      , creator_id
      , lf_video
      , ipl_post
      , postType
      , array(
        select *
        from unnest([
          if (lang_grp is not null, concat("lang_", lang_grp), null)
        ]) as grp
        where grp is not null
        union all
        select concat("tag_", tag) from unnest(tags) as tag
        union all
        select *
        from unnest([
          if(lf_video_grp1 is not null, lf_video_grp1,null)
        ]) as grp
        where grp is not null
        union all
        select *
        from unnest([
          if(lf_video_grp2 is not null, lf_video_grp2,null)
        ]) as grp
        where grp is not null
        union all
        select *
        from unnest([
          if(lf_video_grp3 is not null, lf_video_grp3,null)
        ]) as grp
        where grp is not null
        union all
        select *
        from unnest([
          if(lf_video_grp4 is not null, lf_video_grp4,null)
        ]) as grp
        where grp is not null
        union all
        select *
        from unnest([
          if(lf_video_grp5 is not null, lf_video_grp5,null)
        ]) as grp
        union all
        select *
        from unnest([
          if(ipl_post_grp is not null, ipl_post_grp,null)
        ]) as grp
        where grp is not null
      ) as `groups`
      , array (select concat("tag_", tag) from unnest(tags) as tag) as tags
    from plays
  )
  , top_selection AS (
    select postId
    from (
      SELECT
        *
        , row_number() over(partition by lang_grp order by score_v4 desc) as r1
      from plays)
    where
      (r1 <= 5000 and lang_grp is not null)
  )
  , lf_selection AS (
    select postId
    from (
      SELECT
        *
        , row_number() over(partition by lf_video_grp1 order by score_v4 desc) as r1
        , row_number() over(partition by lf_video_grp2 order by score_v4 desc) as r2
        , row_number() over(partition by lf_video_grp3 order by score_v4 desc) as r3
        , row_number() over(partition by lf_video_grp4 order by score_v4 desc) as r4
        , row_number() over(partition by lf_video_grp5 order by score_v4 desc) as r5
        , row_number() over(partition by ipl_post_grp order by score_v4 desc) as ipl
      from plays)
    where
      ( lf_video_grp1  is not null)
      or ( lf_video_grp2  is not null)
      or ( lf_video_grp3  is not null)
      or ( lf_video_grp4  is not null)
      or ( lf_video_grp5  is not null)
      or ( ipl_post_grp  is not null)
  )
  , tag_selection as (
    select postId
    from (
      select
        *
        , tag
        , row_number() over(partition by tag order by score_v4 desc) as r1
      from plays
      cross join unnest(tags) tag)
    where r1 < 3
  )
  , selection as (
    select * from (
      select postId from top_selection
      union distinct
      select postId from lf_selection
      )
    inner join data using (postId)
  )
select "listPosts:detr" as key, (select string_agg(postId, ",") from selection) as value
union all
(
  select
    concat("postData:{",postId,"}") as key
    , to_json_string(
      struct(
        lang as lang
        , `groups`
        , duration as duration
        , tags as tags
        , creator_id
        , postType
      )
    ) as value
  from selection)
